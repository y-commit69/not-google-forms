// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String     @id @default(uuid())
  email               String     @unique
  password            String
  name                String
  isAdmin             Boolean    @default(false)
  isBlocked           Boolean    @default(false)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  templates           Template[] @relation("TemplateAuthor")
  forms               Form[]
  likes               Like[]
  comments            Comment[]
  accessibleTemplates Template[] @relation("TemplateAccess")
}

model Template {
  id              String     @id @default(uuid())
  title           String
  description     String
  topic           String
  imageUrl        String?
  isPublic        Boolean    @default(true)
  authorId        String
  author          User       @relation("TemplateAuthor", fields: [authorId], references: [id])
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  questions       Question[]
  forms           Form[]
  likes           Like[]
  comments        Comment[]
  tags            Tag[]
  accessibleUsers User[]     @relation("TemplateAccess")
}

model Question {
  id         String   @id @default(uuid())
  templateId String
  template   Template @relation(fields: [templateId], references: [id])
  type       String
  text       String
  order      Int
  answers    Answer[]
}

model Form {
  id         String   @id @default(uuid())
  templateId String
  template   Template @relation(fields: [templateId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  answers    Answer[]
}

model Answer {
  id         String   @id @default(uuid())
  formId     String
  form       Form     @relation(fields: [formId], references: [id])
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  value      String
}

model Like {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  templateId String
  template   Template @relation(fields: [templateId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([userId, templateId])
}

model Comment {
  id         String   @id @default(uuid())
  text       String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  templateId String
  template   Template @relation(fields: [templateId], references: [id])
  createdAt  DateTime @default(now())
}

model Tag {
  id        String     @id @default(uuid())
  name      String     @unique
  templates Template[]
}
